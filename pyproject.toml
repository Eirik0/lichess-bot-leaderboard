[project]
name = "lichess-bot-leaderboard"
version = "0.1.0"
description = "A leaderboard for lichess bots"
requires-python = ">=3.11"


# ruff
[tool.ruff]
# Using a src/tests layout.
src = [
  "src",
  "tests",
]
# Nice and compact.
indent-width = 2
# The GitHub editor is 127 chars wide.
line-length = 127

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
# Explicitly declare double quotes as preferred.
quote-style = "double"

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle error
  "ERA", # eradicate
  "F", # Pyflakes
  "FURB", # refurb
  "I", # isort
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PL", # Pylint
  "PTH", # flake8-use-pathlib
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "UP", # pyupgrade
  "W", # pycodestyle warning
]
ignore = [
  "D203", # incorrect-blank-line-before-class (conflicts with "D211": blank-line-before-class)
  "D213", # multi-line-summary-second-line (conflicts with "D212": multi-line-summary-first-line)
]

[tool.ruff.lint.per-file-ignores]
# Ignore all .py files starting with test_.
"test_*.py" = [
  "D102", # undocumented-public-method
]

[tool.ruff.lint.isort]
combine-as-imports = true
# If a class or a top-level function directly following imports, there will be two blank lines.
# If global variables directly following imports, by default there will only be one blank line.
# PEP 8 leaves it up to our discretion to decide what is best here.
lines-after-imports = 2
# First party imports appear as a separate section.
known-first-party = ["src"]


# pyright
[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "strict"
include = [
  "src",
  "tests",
]
exclude = [
  "**/__pycache__",
  ".venv",
]


# coverage
[tool.coverage.run]
branch = true
command_line = "-m unittest discover -v -s tests -p test_*.py"
dynamic_context = "test_function"
source = [
  "src",
]
omit = [
  "**/__pycache__",
  ".venv",
]

[tool.coverage.report]
# Don't fail due to missing coverage
fail_under = 0
show_missing = true

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

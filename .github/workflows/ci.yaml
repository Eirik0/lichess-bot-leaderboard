name: ♟️ CI

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Determine which jobs need to be run
  determine-which-jobs:
    name: 🔮 determine-which-jobs / 🐧 ubuntu
    runs-on: ubuntu-latest
    outputs:
      check-style-jijna: ${{ steps.check-style-jinja.outputs.changed }}
      check-style-python: ${{ steps.check-style-python.outputs.changed }}
      check-style-toml: ${{ steps.check-style-toml.outputs.changed }}
      check-types: ${{ steps.check-types.outputs.changed }}
      check-tests: ${{ steps.check-types.outputs.changed }}
      check-coverage: ${{ steps.check-tests.outputs.changed }}
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Determine which jobs need to be run based on which files have changed
      - name: 🐱‍👤 Consider check-style-jinja
        id: check-style-jinja
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.jinja' \
            'requirements/dev.txt' \
            'pyproject.toml' \
      - name: 🤵 Consider check-style-python
        id: check-style-python
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.py' \
            'requirements/style-python.txt' \
            'ruff.toml' \
      - name: 👷 Consider check-style-toml
        id: check-style-toml
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.toml' \
      - name: ⌨️ Consider check-types
        id: check-types
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.py' \
            'requirements/leaderboard.txt' \
            'pyproject.toml' \
      - name: 🧪 Consider check-tests
        id: check-tests
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.jinja' \
            '**/*.py' \
            'requirements/leaderboard.txt' \
      - name: 🔬 Consider check-coverage
        id: check-coverage
        uses: ./.github/actions/check-dependencies-changed
        with:
          pathspec: |-
            '**/*.jinja' \
            '**/*.py' \
            'requirements/leaderboard.txt' \
            'pyproject.toml' \

  # Check linting and formatting (jinja)
  check-style-jinja:
    name: 🐱‍👤 check-style-jinja / 🐧 ubuntu
    runs-on: ubuntu-latest
    needs: determine-which-jobs
    if: needs.determine-which-jobs.outputs.check-style-jijna == 'true'
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 🛠️ Install dependencies (python)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      # Format
      - name: 🧹 Check format (djlint)
        run: |
          djlint templates -e jinja --check
      # Lint
      - name: ✨ Check lint (djlint)
        run: |
          djlint templates -e jinja --lint

  # Check linting and formatting (python)
  check-style-python:
    name: 🤵 check-style-python / 🐧 ubuntu
    runs-on: ubuntu-latest
    needs: determine-which-jobs
    if: needs.determine-which-jobs.outputs.check-style-python == 'true'
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🐍 Set up Ruff
        uses: astral-sh/ruff-action@v3
      # Format
      - name: 🧹 Check format (ruff)
        run: |
          ruff format --check
      # Lint
      - name: ✨ Check lint (ruff)
        run: |
          ruff check

  # Check formatting (toml)
  check-style-toml:
    name: 👷 check-style-toml / 🐧 ubuntu
    runs-on: ubuntu-latest
    needs:
      - determine-which-jobs
    if: needs.determine-which-jobs.outputs.check-style-toml == 'true'
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🚿 Set up Taplo
        uses: uncenter/setup-taplo@v1
      # Format
      - name: 🧹 Check format (Taplo)
        run: |
          taplo fmt --check

  # Run static type checking
  check-types:
    name: ⌨️ check-types / 🐧 ubuntu
    runs-on: ubuntu-latest
    needs:
      - determine-which-jobs
      - check-style-python
    if: |
      needs.determine-which-jobs.outputs.check-types == 'true' &&
      needs.check-style-python.result != 'failure'
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 🛠️ Install dependencies (python)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/leaderboard.txt
      - name: 🐸 Set up node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: 📦 Install dependencies (node.js)
        run: |
          npm install -g pyright
      # Type check
      - name: 🗿 Type check with pyright
        run: |
          pyright --verbose

  # Run tests on mac, windows, and ubuntu
  check-tests:
    name: 🧪 check-tests / ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs:
      - determine-which-jobs
      - check-style-jinja
      - check-types
    if: |
      needs.determine-which-jobs.outputs.check-tests == 'true' &&
      needs.check-style-jinja.result != 'failure' &&
      needs.check-types.result != 'failure'
    strategy:
      matrix:
        include:
          - { name: 🐧 ubuntu, os: ubuntu-latest }
          - { name: 🖼️ windows, os: windows-latest }
          - { name: 🍏 macos, os: macos-latest }
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 🛠️ Install dependencies (python)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/leaderboard.txt
      # Run tests
      - name: ⚗️ Run unit tests
        run: |
          python -m unittest discover -v -s tests -p test_*.py

  # Run coverage and generate artifacts
  check-coverage:
    name: 🔬 check-coverage / 🐧 ubuntu
    runs-on: ubuntu-latest
    needs:
      - determine-which-jobs
      - check-tests
    if: |
      needs.determine-which-jobs.outputs.check-coverage == 'true' &&
      needs.check-tests.result != 'failure'
    steps:
      # Setup
      - name: 🛒 Checkout repo
        uses: actions/checkout@v4
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 🛠️ Install dependencies (python)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/all.txt
      # Run tests with coverage
      - name: ☂️ Run unittest with coverage
        run: |
          coverage run
      # Coverage xml
      - name: 📜 Generate coverage xml
        run: |
          coverage xml
        # Comment about code coverage on PRs
      - name: 🐒 Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' }}
        # Use an old version to avoid adding a check to the workflow
        uses: 5monkeys/cobertura-action@v9
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          path: coverage.xml
          skip_covered: false
          minimum_coverage: 80
          show_line: true
          show_branch: true
          show_missing: true
      # Coverage html
      - name: 📊 Generate coverage html
        run: |
          coverage html
      # Upload coverage artifacts
      - name: 🤳 Upload coverage html
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/
